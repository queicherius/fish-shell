# DO NOT EDIT THIS FILE DIRECTLY. INSTEAD, EDIT THE REPOSITORY AND RUN THE SELF-UPDATE SCRIPT

# Install:
# 1) curl https://raw.githubusercontent.com/queicherius/fish-shell/master/config.fish > ~/.config/fish/config.fish
# 2) source ~/.config/fish/config.fish

# Update:
# 1) fish_config_update

# --- GENERAL SHELL ------------------------------------------------------------

# Remove the welcome message
set fish_greeting

# Set prompt format
function fish_prompt
  set_color normal
  echo -n (hostname)
  echo -n ' '
  set_color green
  echo -n (basename $PWD)
  echo -n ' → '
  set_color normal
end

# Set title format  
function fish_title
  set COMMAND (status current-command)
  set FIRST_ARGUMENT (string split ' ' -- $argv[1])

  if [ "$COMMAND" = "yarn" ]
    echo (basename $PWD) ' → ' $COMMAND $FIRST_ARGUMENT[2]
  else if [ "$COMMAND" = "fish" ]
    echo (basename $PWD) ' → '
  else 
    echo (basename $PWD) ' → ' $COMMAND
  end
end

# Generic function to handle confiratioms
function read_confirm
  while true
    read -l -P 'Do you want to continue? [y/N] ' confirm

    switch $confirm
      case Y y
        return 0
      case '' N n
        return 1
    end
  end
end

# Self update functionality
function fish_config_update
  curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/queicherius/fish-shell/master/config.fish > ~/.config/fish/config.fish
  source ~/.config/fish/config.fish
end

# Force non-colored `ls` output
function ls
  command ls $argv
end

# Start the shell in the working directory
cd /projects

# --- NODE.JS -----------------------------------------------------------------

# Setup path for yarn global packages binaries
set PATH (yarn global bin) $PATH

# Supress `npm` usage, because `yarn` is better
function npm
  echo "`npm` is disabled, try using `yarn` instead."
end

function really_use_npm
  command npm $argv
end

# Make `np` behave like you'd expect (don't delete dependencies, use yarn, don't enable 2fa)
function np
  command np $argv --no-cleanup --yarn --no-2fa
end

# Rebuild `node_modules` via `yarn`
function yarn_nuke
  rm -rf node_modules/ package-lock.json
  yarn
end

# Completely delete all node modules in this folder, and all subfolders
function recursive_rimraf_node_modules
  echo "This will delete all node_modules in this folder, and all subfolders:"
  find . -name "node_modules" -prune
  echo ""

  if read_confirm
    find . -name "node_modules" -prune -exec rm -rf '{}' +  
  end
end

# Auto-upgrade all dependencies to their newest versions
function yarn_upgrade_deps
  git_cleanup
  git branch -D update-dependencies &>/dev/null
  git checkout -b update-dependencies
  yarn upgrade --latest
  git add package.json yarn.lock
  git commit -m "Update dependencies"
  git push --set-upstream --force origin update-dependencies
end

# Export the NPM token for the Github registry to an environment variable
export DEVOXA_GITHUB_REGISTRY_TOKEN=(cat ~/.config/DEVOXA_GITHUB_REGISTRY_TOKEN)
export NPM_TOKEN=(cat ~/.config/DEVOXA_GITHUB_REGISTRY_TOKEN)

# --- GIT ---------------------------------------------------------------------

# Reset a git repository back to master and remove merged branches
function git_cleanup
  git reset --hard HEAD
  git checkout master
  git pull
  git fetch --prune
  git fetch --tags -f

  # Delete merged branches
  git branch --merged | grep  -v '\*\|master' | xargs -r -n 1 git branch -d

  # Delete squash-merged branches
  bash -c 'git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do mergeBase=$(git merge-base master $branch) && [[ $(git cherry master $(git commit-tree $(git rev-parse $branch\^{tree}) -p $mergeBase -m _)) == "-"* ]] && git branch -D $branch; done'
end

# Show what I did in a repository recently
function git_standup
  command git-standup $argv
end

# Reset the file permissions for a git repository
function git_file_permissions_reset
  git diff -p -R --no-color | grep -E "^(diff|(old|new) mode)" --color=never | git apply
end

# Merge a base branch into a feature branch and push to origin
function git_masterize
  set -q argv[1]; or echo "No branch selected, exiting." && return 1;
  set BRANCH "$argv[1]"

  set -q argv[2]; or set argv[2] "master"
  set ORIGIN "$argv[2]"

  echo "git_masterize: $ORIGIN -> $BRANCH"

  echo "git_masterize: cleanup"
  git reset --hard HEAD
  git clean -fd
  git checkout "$ORIGIN"
  git pull
  git fetch --prune
  git fetch --tags -f
  git reset --hard HEAD

  echo "git_masterize: checkout"
  git checkout "$BRANCH"

  echo "git_masterize: pull"
  git pull --no-edit

  echo "git_masterize: merge"
  git merge "$ORIGIN" --no-edit

  echo "git_masterize: push"
  git push

  echo "git_masterize: done"
end

# Push an empty commit to a branch, to trigger CI
function git_trigger_ci
  set -q argv[1]; or echo "No branch selected, exiting." && return 1;
  set BRANCH "$argv[1]"

  echo "git_trigger_ci: $BRANCH"

  echo "git_trigger_ci: cleanup"
  git reset --hard HEAD
  git clean -fd
  git checkout master
  git pull
  git fetch --prune
  git reset --hard HEAD

  echo "git_trigger_ci: checkout"
  git checkout "$BRANCH"

  echo "git_trigger_ci: pull"
  git pull --no-edit

  echo "git_trigger_ci: commit"
  git commit --allow-empty -m "[Empty] Trigger CI"

  echo "git_trigger_ci: push"
  git push

  echo "git_trigger_ci: done"
end

# --- DOCKER ------------------------------------------------------------------

# Make docker behave
function docker_fuck_off
  docker service ls -q | xargs -r docker service rm
  docker ps -aq | xargs -r docker kill
  docker ps -aq | xargs -r docker rm
  docker system prune -f
end

# Fully clear everything, including secrets and volumes
function docker_purge
  echo "This will delete everything Docker related, including secrets and volumes."
  echo ""

  if read_confirm
    docker service ls -q | xargs -r docker service rm
    docker ps -aq | xargs -r docker kill
    docker ps -aq | xargs -r docker rm
    docker volume ls -q | xargs -r docker volume rm -f
    docker secret ls -q | xargs -r docker secret rm
    docker config ls -q | xargs -r docker config rm
    docker system prune -f -a --volumes
  end
end

# Open a shell into a docker container by name
function docker_sh 
  docker exec -it (docker ps | grep $argv[1] | head -1 | cut -c1-12) sh
end

# Enable direnv for running .envrc files
/root/.cargo/bin/direnv hook fish | source

# --- RUST -------------------------------------------------------------------

# Get Rust into the path
source $HOME/.cargo/env

# --- VS CODE ----------------------------------------------------------------

# Fix startup issues for the VS Code server
function fix_vs_code
  rm /root/.vscode-server-insiders/bin/*/*-lock*
end
